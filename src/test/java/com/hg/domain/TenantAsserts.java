package com.hg.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TenantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllPropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantAutoGeneratedPropertiesEquals(expected, actual);
        assertTenantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAllUpdatablePropertiesEquals(Tenant expected, Tenant actual) {
        assertTenantUpdatableFieldsEquals(expected, actual);
        assertTenantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantAutoGeneratedPropertiesEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableFieldsEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant relevant properties")
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSettingsMetadata()).as("check settingsMetadata").isEqualTo(actual.getSettingsMetadata()))
            .satisfies(e -> assertThat(e.getSubscriptionType()).as("check subscriptionType").isEqualTo(actual.getSubscriptionType()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantUpdatableRelationshipsEquals(Tenant expected, Tenant actual) {
        assertThat(expected)
            .as("Verify Tenant relationships")
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getTenantImage()).as("check tenantImage").isEqualTo(actual.getTenantImage()));
    }
}
