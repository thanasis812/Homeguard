package com.hg.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TenantPropertyPreferencesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantPropertyPreferencesAllPropertiesEquals(
        TenantPropertyPreferences expected,
        TenantPropertyPreferences actual
    ) {
        assertTenantPropertyPreferencesAutoGeneratedPropertiesEquals(expected, actual);
        assertTenantPropertyPreferencesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantPropertyPreferencesAllUpdatablePropertiesEquals(
        TenantPropertyPreferences expected,
        TenantPropertyPreferences actual
    ) {
        assertTenantPropertyPreferencesUpdatableFieldsEquals(expected, actual);
        assertTenantPropertyPreferencesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantPropertyPreferencesAutoGeneratedPropertiesEquals(
        TenantPropertyPreferences expected,
        TenantPropertyPreferences actual
    ) {
        assertThat(expected)
            .as("Verify TenantPropertyPreferences auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantPropertyPreferencesUpdatableFieldsEquals(
        TenantPropertyPreferences expected,
        TenantPropertyPreferences actual
    ) {
        assertThat(expected)
            .as("Verify TenantPropertyPreferences relevant properties")
            .satisfies(e -> assertThat(e.getFavorite()).as("check favorite").isEqualTo(actual.getFavorite()))
            .satisfies(e -> assertThat(e.getFavoriteDate()).as("check favoriteDate").isEqualTo(actual.getFavoriteDate()))
            .satisfies(e -> assertThat(e.getReminder()).as("check reminder").isEqualTo(actual.getReminder()))
            .satisfies(e -> assertThat(e.getReminderDate()).as("check reminderDate").isEqualTo(actual.getReminderDate()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTenantPropertyPreferencesUpdatableRelationshipsEquals(
        TenantPropertyPreferences expected,
        TenantPropertyPreferences actual
    ) {
        assertThat(expected)
            .as("Verify TenantPropertyPreferences relationships")
            .satisfies(e -> assertThat(e.getProperty()).as("check property").isEqualTo(actual.getProperty()))
            .satisfies(e -> assertThat(e.getTenant()).as("check tenant").isEqualTo(actual.getTenant()));
    }
}
