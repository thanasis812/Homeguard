package com.hg.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LandLordAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandLordAllPropertiesEquals(LandLord expected, LandLord actual) {
        assertLandLordAutoGeneratedPropertiesEquals(expected, actual);
        assertLandLordAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandLordAllUpdatablePropertiesEquals(LandLord expected, LandLord actual) {
        assertLandLordUpdatableFieldsEquals(expected, actual);
        assertLandLordUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandLordAutoGeneratedPropertiesEquals(LandLord expected, LandLord actual) {
        assertThat(expected)
            .as("Verify LandLord auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandLordUpdatableFieldsEquals(LandLord expected, LandLord actual) {
        assertThat(expected)
            .as("Verify LandLord relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSettingsMetadata()).as("check settingsMetadata").isEqualTo(actual.getSettingsMetadata()))
            .satisfies(e -> assertThat(e.getDeleted()).as("check deleted").isEqualTo(actual.getDeleted()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandLordUpdatableRelationshipsEquals(LandLord expected, LandLord actual) {
        assertThat(expected)
            .as("Verify LandLord relationships")
            .satisfies(e -> assertThat(e.getOwner()).as("check owner").isEqualTo(actual.getOwner()))
            .satisfies(e -> assertThat(e.getLandLordImage()).as("check landLordImage").isEqualTo(actual.getLandLordImage()));
    }
}
