package com.hg.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ApplicationRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationRequestAllPropertiesEquals(ApplicationRequest expected, ApplicationRequest actual) {
        assertApplicationRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertApplicationRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationRequestAllUpdatablePropertiesEquals(ApplicationRequest expected, ApplicationRequest actual) {
        assertApplicationRequestUpdatableFieldsEquals(expected, actual);
        assertApplicationRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationRequestAutoGeneratedPropertiesEquals(ApplicationRequest expected, ApplicationRequest actual) {
        assertThat(expected)
            .as("Verify ApplicationRequest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationRequestUpdatableFieldsEquals(ApplicationRequest expected, ApplicationRequest actual) {
        assertThat(expected)
            .as("Verify ApplicationRequest relevant properties")
            .satisfies(e -> assertThat(e.getPayload()).as("check payload").isEqualTo(actual.getPayload()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getCreatedDate()).as("check createdDate").isEqualTo(actual.getCreatedDate()))
            .satisfies(e -> assertThat(e.getUpdatedDate()).as("check updatedDate").isEqualTo(actual.getUpdatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertApplicationRequestUpdatableRelationshipsEquals(ApplicationRequest expected, ApplicationRequest actual) {
        assertThat(expected)
            .as("Verify ApplicationRequest relationships")
            .satisfies(e -> assertThat(e.getProperty()).as("check property").isEqualTo(actual.getProperty()));
    }
}
